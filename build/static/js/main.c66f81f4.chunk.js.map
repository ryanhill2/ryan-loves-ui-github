{"version":3,"sources":["components/LoveWebsite.js","components/Quiz.js","App.js","reportWebVitals.js","index.js"],"names":["LoveWebsite","dublinTime","setDublinTime","useState","melbourneTime","setMelbourneTime","dublinDay","setDublinDay","melbourneDay","setMelbourneDay","useEffect","fetchTime","dublinNow","moment","tz","melbourneNow","dublinTimeNow","format","melbourneTimeNow","dublinDayNow","melbourneDayNow","interval","setInterval","clearInterval","React","createElement","className","Quiz","questions","question","options","answer","currentQuestion","setCurrentQuestion","score","setScore","showScore","setShowScore","length","map","option","index","key","onClick","selectedOption","nextQuestion","handleAnswerOptionClick","App","showQuiz","setShowQuiz","handleStartQuiz","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c66f81f4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment-timezone';\n\n// Replace these with your actual image URLs\nconst yourImageUrl = 'path/to/your/image.jpg';\nconst herImageUrl = 'path/to/her/image.jpg';\n\nconst LoveWebsite = () => {\n    const [dublinTime, setDublinTime] = useState('');\n    const [melbourneTime, setMelbourneTime] = useState('');\n    const [dublinDay, setDublinDay] = useState('');\n    const [melbourneDay, setMelbourneDay] = useState('');\n\n    useEffect(() => {\n        // Function to fetch and set the current time and day in both time zones\n        const fetchTime = () => {\n            const dublinNow = moment().tz('Europe/Sligo');\n            const melbourneNow = moment().tz('Australia/Melbourne');\n\n            const dublinTimeNow = dublinNow.format('HH:mm');\n            const melbourneTimeNow = melbourneNow.format('HH:mm');\n\n            const dublinDayNow = dublinNow.format('dddd');\n            const melbourneDayNow = melbourneNow.format('dddd');\n\n            setDublinTime(dublinTimeNow);\n            setMelbourneTime(melbourneTimeNow);\n            setDublinDay(dublinDayNow);\n            setMelbourneDay(melbourneDayNow);\n        };\n\n        // Fetch the time initially\n        fetchTime();\n\n        // Update the time every minute\n        const interval = setInterval(fetchTime, 60000); // Update every minute\n\n        // Clean up interval on component unmount\n        return () => clearInterval(interval);\n    }, []);\n\nreturn (\n        <div>\n            <div className=\"image-container\">\n                <div>\n                    <h2>Hubby</h2>\n                    <p>\n                        Current Time in Sligo, Ireland: {dublinTime} <br />\n                        Current Day: {dublinDay}\n                    </p>\n                </div>\n                <div>\n                    <h2>Wifey</h2>\n                    <p>\n                        Current Time in Melbourne, Australia: {melbourneTime} <br />\n                        Current Day: {melbourneDay}\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default LoveWebsite;\n","// src/components/Quiz.js\nimport React, { useState } from 'react';\n\nconst Quiz = () => {\n    const questions = [\n        {\n            question: 'What is Ryan\\'s favorite color?',\n            options: ['Red', 'Blue', 'Green', 'Purple'],\n            answer: 'Red'\n        },\n        {\n            question: 'Where did you first meet?',\n            options: ['School', 'Work', 'Party', 'Online'],\n            answer: 'Work'\n        },\n        {\n            question: 'What is Ryan\\'s favorite physical thing about you?',\n            options: ['Eyes', 'Butt', 'Smile', 'Legs'],\n            answer: 'Butt'\n        },\n        {\n            question: 'What is Ryan\\'s favorite non physical thing about you?',\n            options: ['Your Money', 'Your Location', 'Your Kindness', 'Your Confidence'],\n            answer: 'Your Kindness'\n        },\n        {\n            question: 'What is Ryan\\'s favorite thing to eat?',\n            options: ['Pizza', 'Chicken', 'Curry', 'You!'],\n            answer: 'Chicken'\n        },\n        // Add more questions here\n    ];\n\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [score, setScore] = useState(0);\n    const [showScore, setShowScore] = useState(false);\n\n    const handleAnswerOptionClick = (selectedOption) => {\n        if (selectedOption === questions[currentQuestion].answer) {\n            setScore(score + 1);\n        }\n\n        const nextQuestion = currentQuestion + 1;\n        if (nextQuestion < questions.length) {\n            setCurrentQuestion(nextQuestion);\n        } else {\n            setShowScore(true);\n        }\n    };\n\n    return (\n        <div className=\"quiz\">\n            {showScore ? (\n                <div className=\"score-section\">\n                    You scored {score} out of {questions.length}\n                </div>\n            ) : (\n                <div>\n                    <div className=\"question-section\">\n                        <div className=\"question-count\">\n                            <span>Question {currentQuestion + 1}</span>/{questions.length}\n                        </div>\n                        <div className=\"question-text\">{questions[currentQuestion].question}</div>\n                    </div>\n                    <div className=\"answer-section\">\n                        {questions[currentQuestion].options.map((option, index) => (\n                            <button key={index} onClick={() => handleAnswerOptionClick(option)}>\n                                {option}\n                            </button>\n                        ))}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Quiz;\n","import React, { useState } from 'react';\nimport './App.css';\nimport LoveWebsite from './components/LoveWebsite';\nimport Quiz from './components/Quiz';\n\n\nfunction App() {\n    const [showQuiz, setShowQuiz] = useState(false);\n\n    const handleStartQuiz = () => {\n        setShowQuiz(true);\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Welcome to Raz</h1>\n            </header>\n            <LoveWebsite />\n            <div>\n                {!showQuiz ? (\n                    <button onClick={handleStartQuiz}>Start Quiz</button>\n                ) : (\n                    <Quiz />\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}